var express = require('express');var router = express.Router();var db_poem = require('../controller/db_poem.js');var fail_json = {    "success": 0,    "result": {}};var success_json = {    "success": 200,    "total_count" : 0,    "result": {}};router.post('/add', function (req, res, next) {    var data = {        'uid' : req.body.uid,        'emotion_code' : req.body.emotion_code,        'emotion_name' : req.body.emotion_name,        'title' : req.body.title,        'content' : req.body.content,        'public' : req.body.public    };    if(data.uid <= 0) {        fail_json.success = 403;        fail_json.result.message = 'uid invalid';        res.json(fail_json);    }    db_poem.addPoem(data, function (err, result) {        console.log('poem write err', err);        console.log('poem write res', result);        if (err) {            fail_json.success = err.errno;            fail_json.result.message = err.code;            res.json(fail_json);        } else {            success_json.result.pid = result.insertId;            res.json(success_json);        }    });});router.post('/modify/:pid', function(req, res, next) {    var data = {        'uid' : req.body.uid,        'pid' : req.params.pid * 1, //string to int        'title' : req.body.title,        'content' : req.body.content,        'public' :req.body.public    };    if(data.uid <= 0) {        fail_json.success = 403;        fail_json.result.message = 'uid invalid';        res.json(fail_json);    }    db_poem.modifyPoem(data, function(err, result) {        console.log('poem revise err', err);        console.log('poem revise res', result);        if (err) {            fail_json.success = err.errno;            fail_json.result.message = err.code;            res.json(fail_json);        } else {            if(result) {                res.json(success_json);            } else {                fail_json.success = 404;                fail_json.result.message = 'poem not found';                res.json(fail_json);            }        }    });});router.post('/del/:pid', function(req, res, next) {    var data = {        'uid' : req.body.uid,        'pid' : req.params.pid * 1    };    if(data.uid <= 0) {        fail_json.success = 403;        fail_json.result.message = 'uid invalid';        res.json(fail_json);    }    db_poem.delPoem(data, function(err, result) {        console.log('poem remove err', err);        console.log('poem remove res', result);        if(err) {            fail_json.success = err.errno;            fail_json.result.message = err.code;            res.json(fail_json);        } else {            if(result) {                res.json(success_json);            } else {                fail_json.success = 404;                fail_json.result.message = 'poem not found';                res.json(fail_json);            }        }    });});router.post('/list', function(req, res, next) {    var data = {        'uid' : req.body.uid,        'emotion_code' : req.body.emotion_code,        'page' : req.body.page * 1,        'limit' : req.body.limit * 1    };    if(data.uid <= 0) {        fail_json.success = 403;        fail_json.result.message = 'uid invalid';        res.json(fail_json);    }    db_poem.getList(data, function(err, result) {        console.log('poem list err', err);        console.log('poem list res', result);        if(err) {            fail_json.success = err.errno;            fail_json.result.message = err.code;            res.json(fail_json);        } else {            success_json.total_count = result.length;            success_json.result = result;            if(success_json.total_count == 0) {                success_json.success = 204;            }            res.json(success_json);        }    });});module.exports = router;